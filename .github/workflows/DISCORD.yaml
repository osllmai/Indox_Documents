name: GitHub to Discord Notification (Master)

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  notify_discord:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          clean: false

      - name: Gather Deployment Information
        id: gather_info
        run: |
          TIMESTAMP=$(date -u "+%A, %B %d %Y, %I:%M:%S %p UTC")
          TAG_NAME="v$(date +'%Y%m%d-%H%M%S')"
          VERSION_NAME="$(date +'%Y.%m.%d')"
          
          echo "TIMESTAMP=$TIMESTAMP" >> $GITHUB_ENV
          echo "REPO=${{ github.repository }}" >> $GITHUB_ENV
          echo "MARKDOWN_URL=https://github.com/osllmai/Indox_Documents/blob/master/README.md" >> $GITHUB_ENV
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV

      - name: Load README.md Content
        id: load_markdown
        run: |
          # Read local README.md and limit to 1500 characters
          MARKDOWN_CONTENT=$(cat README.md | head -c 500)

          # Fallback if empty
          if [ -z "$MARKDOWN_CONTENT" ]; then
            MARKDOWN_CONTENT="README.md could not be loaded."
          fi

          # Store with heredoc to handle newlines
          delimiter=$(openssl rand -hex 6)
          echo "MARKDOWN_CONTENT<<${delimiter}" >> $GITHUB_ENV
          echo "$MARKDOWN_CONTENT" >> $GITHUB_ENV
          echo "${delimiter}" >> $GITHUB_ENV

      - name: Create and Push Git Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"
          git tag $TAG_NAME
          git push origin $TAG_NAME

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create $TAG_NAME \
            --title "Release $VERSION_NAME" \
            --notes "Automated release generated on $TIMESTAMP."

      - name: Send GitHub Event Notification to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_MASTER_URL }}
        run: |
          set -x  # Enable debugging
          echo "Sending the following payload to Discord:"
          echo "TIMESTAMP: $TIMESTAMP"
          echo "REPO: $REPO"
          echo "TAG_NAME: $TAG_NAME"
          echo "VERSION_NAME: $VERSION_NAME"
          echo "MARKDOWN_URL: $MARKDOWN_URL"
          echo "MARKDOWN_CONTENT (preview):"
          echo "$MARKDOWN_CONTENT"

          JSON_PAYLOAD=$(jq -n \
            --arg timestamp "$TIMESTAMP" \
            --arg repo "$REPO" \
            --arg markdown_url "$MARKDOWN_URL" \
            --arg tag "$TAG_NAME" \
            --arg version "$VERSION_NAME" \
            --arg markdown_content "$MARKDOWN_CONTENT" \
            '{
              "username": "GitHub Bot",
              "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
              "embeds": [
                {
                  "title": "üöÄ Release \($version)",
                  "description": "We are excited to announce the latest release of our project! This update includes key improvements and enhancements.",
                  "fields": [
                    {
                      "name": "üìÖ Timestamp",
                      "value": $timestamp,
                      "inline": false
                    },
                    {
                      "name": "üìÇ Repository",
                      "value": "[\($repo)](https://github.com/\($repo))",
                      "inline": false
                    },
                    {
                      "name": "üìú Markdown Documentation",
                      "value": "[Click here](\($markdown_url))\n\n```\n\($markdown_content)\n```",
                      "inline": false
                    },
                    {
                      "name": "üè∑Ô∏è Tag",
                      "value": "\($tag) - \($timestamp)",
                      "inline": false
                    },
                    {
                      "name": "üöÄ Version",
                      "value": "Release \($version)",
                      "inline": false
                    }
                  ]
                }
              ]
            }')

          # Validate JSON formatting before sending
          echo "$JSON_PAYLOAD" | jq .

          # Send to Discord webhook
          curl -H "Content-Type: application/json" -X POST -d "$JSON_PAYLOAD" "$DISCORD_WEBHOOK_URL"
