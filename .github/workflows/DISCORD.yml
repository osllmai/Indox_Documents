name: GitHub to Discord & Telegram Notification

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  notify_discord_telegram:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history to get all tags

      - name: Gather Deployment Information
        id: gather_info
        run: |
          TIMESTAMP=$(date -u "+%A, %B %d %Y, %I:%M:%S %p UTC")
          echo "TIMESTAMP=$TIMESTAMP" | tee -a $GITHUB_ENV
          echo "REPO=${{ github.repository }}" | tee -a $GITHUB_ENV
          echo "MARKDOWN_URL=https://github.com/osllmai/Indox_Documents/blob/master/README.md" | tee -a $GITHUB_ENV

      - name: Fetch README.md Content
        id: fetch_readme
        run: |
          README_URL="https://raw.githubusercontent.com/osllmai/Indox_Documents/refs/heads/master/README.md"
          README_CONTENT=$(curl -s $README_URL | head -c 750)
          README_CONTENT="${README_CONTENT//$'\n'/' '}"  # Remove newlines for better formatting
          echo "README_PREVIEW=$README_CONTENT" >> $GITHUB_ENV
          echo "✅ Fetched README preview successfully."

      - name: Fetch Latest Tag and Determine Next Version
        id: versioning
        run: |
          echo "🔍 DEBUG: Fetching latest tags..."
          git fetch --tags
          LATEST_TAG=$(git tag -l "v*" --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1 | tr -d '\r')
          echo "📌 Latest Tag Found: $LATEST_TAG"

          if [[ -z "$LATEST_TAG" ]]; then
            NEW_TAG="v0.1.0"
          else
            if [[ "$LATEST_TAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              MAJOR="${BASH_REMATCH[1]}"
              MINOR="${BASH_REMATCH[2]}"
              PATCH="${BASH_REMATCH[3]}"
              PATCH=$((PATCH + 1))
              NEW_TAG="v$MAJOR.$MINOR.$PATCH"
              echo "✅ Next Tag: $NEW_TAG"
            else
              echo "❌ ERROR: Could not parse latest tag '$LATEST_TAG'"
              exit 1
            fi
          fi

          echo "NEW_TAG=$NEW_TAG" | tee -a $GITHUB_ENV

      - name: Prepare Message
        id: prepare_message
        run: |
          RELEASE_MESSAGE="🚀 *New Release: $NEW_TAG*\n\n\
          📂 Repository: [$REPO](https://github.com/$REPO)\n\
          📜 Documentation Update Preview:\n\
          $README_PREVIEW...\n\n\
          To continue reading, please visit: [Full Documentation]($MARKDOWN_URL)\n\
          🏷️ Version: $NEW_TAG\n\n\
          🔔 Stay updated with the latest releases!"

          echo "MESSAGE_PAYLOAD=$RELEASE_MESSAGE" >> $GITHUB_ENV
          echo "✅ Message prepared successfully."

      - name: Send GitHub Event Notification to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_MASTER_URL }}
        run: |
          echo "🔍 DEBUG: Sending message to Discord..."
          JSON_PAYLOAD=$(jq -n \
            --arg repo "$REPO" \
            --arg markdown_url "$MARKDOWN_URL" \
            --arg tag "$NEW_TAG" \
            --arg readme_preview "$README_PREVIEW" \
            '{
              "username": "Pheonix Bot",
              "avatar_url": "https://raw.githubusercontent.com/osllmai/phoenix/refs/heads/master/phoenix_qt/media/image_company/Phoenix.png",
              "embeds": [
                {
                  "title": "🚀 Release \($tag)",
                  "description": "New release deployed automatically!",
                  "fields": [
                    {
                      "name": "📂 Repository",
                      "value": "[\($repo)](https://github.com/\($repo))",
                      "inline": false
                    },
                    {
                      "name": "📜 Documentation Update Preview",
                      "value": "\($readme_preview)...\n\n[Read More](\($markdown_url))",
                      "inline": false
                    },
                    {
                      "name": "🏷️ Version",
                      "value": "\($tag)",
                      "inline": false
                    }
                  ]
                }
              ]
            }')

          RESPONSE=$(curl -H "Content-Type: application/json" -X POST -d "$JSON_PAYLOAD" "$DISCORD_WEBHOOK_URL")
          echo "✅ Discord Response: $RESPONSE"

      - name: Send GitHub Event Notification to Telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHANNEL_NAME: ${{ secrets.TELEGRAM_CHANNEL_NAME }}
        run: |
          echo "🔍 DEBUG: Sending message to Telegram..."
          TELEGRAM_URL="https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage"

          # Escape special characters for MarkdownV2 in Telegram
          ESCAPED_README_PREVIEW=$(echo "$README_PREVIEW" | sed -E 's/([_\*\[\]\(\)~`>#\+\-=|{}.!])/\\\1/g')

          # Format message for Telegram
          TELEGRAM_MESSAGE="🚀 *New Release: $NEW_TAG*\n\n\
          📂 Repository: [$REPO](https://github.com/$REPO)\n\
          📜 *Documentation Update Preview:*\n\
          \`\`\`\n$ESCAPED_README_PREVIEW...\n\`\`\`\n\n\
          🔗 [Read Full Documentation]($MARKDOWN_URL)\n\
          🏷️ *Version:* $NEW_TAG\n\n\
          🔔 Stay updated with the latest releases!"

          RESPONSE=$(curl -s -G "$TELEGRAM_URL" \
            --data-urlencode "chat_id=$TELEGRAM_CHANNEL_NAME" \
            --data-urlencode "text=$TELEGRAM_MESSAGE" \
            --data-urlencode "parse_mode=MarkdownV2")

          echo "✅ Telegram Response: $RESPONSE"
