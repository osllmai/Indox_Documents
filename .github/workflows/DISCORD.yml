name: GitHub Auto Tag & Release with Discord Notification

on:
  push:
    branches: [ "master", "development" ]
  workflow_dispatch:

permissions:
  contents: write  # Ensures GitHub Actions can push tags and create releases

jobs:
  tag_and_release:
    runs-on: ubuntu-latest
    outputs:
      NEW_TAG: ${{ steps.versioning.outputs.NEW_TAG }}
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure we fetch all tags

      - name: Fetch Latest Tag and Determine Next Version
        id: versioning
        run: |
          git fetch --tags
          LATEST_TAG=$(git tag -l "v*-${LABEL}" --sort=-v:refname | head -n 1 | tr -d '\r')

          if [[ -z "$LATEST_TAG" ]]; then
            NEW_TAG="v0.1.0-${LABEL}"
          else
            if [[ "$LATEST_TAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)-${LABEL}$ ]]; then
              MAJOR="${BASH_REMATCH[1]}"
              MINOR="${BASH_REMATCH[2]}"
              PATCH="${BASH_REMATCH[3]}"
            else
              echo "Error: Could not parse latest tag '$LATEST_TAG'"
              exit 1
            fi

            PATCH=$((PATCH + 1))
            NEW_TAG="v$MAJOR.$MINOR.$PATCH-${LABEL}"
          fi

          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "::set-output name=NEW_TAG::$NEW_TAG"

      - name: Create and Push New Git Tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@github.com"

          if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
            echo "Tag $NEW_TAG already exists. Skipping tagging."
          else
            echo "Creating new tag: $NEW_TAG"
            git tag "$NEW_TAG"
            git push origin "$NEW_TAG" || echo "Tag push failed!"
          fi

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if gh release view "$NEW_TAG" >/dev/null 2>&1; then
            echo "Release $NEW_TAG already exists. Skipping."
          else
            echo "Creating GitHub Release for $NEW_TAG"
            gh release create "$NEW_TAG" \
              --title "Release $NEW_TAG" \
              --notes "Automated release generated for $NEW_TAG."
          fi
