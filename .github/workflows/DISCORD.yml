name: GitHub to Discord & Telegram Notification

on:
  push:
    branches: [ "master" ]
  workflow_dispatch:

jobs:
  notify_discord_telegram:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch full history to get all tags

      - name: Gather Deployment Information
        id: gather_info
        run: |
          TIMESTAMP=$(date -u "+%A, %B %d %Y, %I:%M:%S %p UTC")
          echo "TIMESTAMP=$TIMESTAMP" | tee -a $GITHUB_ENV
          echo "REPO=${{ github.repository }}" | tee -a $GITHUB_ENV
          echo "MARKDOWN_URL=https://github.com/osllmai/Indox_Documents/blob/master/README.md" | tee -a $GITHUB_ENV

      - name: Load README.md Content
        id: load_markdown
        run: |
          echo "üîç DEBUG: Reading README.md..."
          if [[ -f README.md ]]; then
            MARKDOWN_CONTENT=$(head -c 800 README.md)
            echo "‚úÖ README.md content loaded."
          else
            echo "‚ö†Ô∏è WARNING: README.md not found!"
            MARKDOWN_CONTENT="README.md could not be loaded."
          fi

          # Remove Markdown formatting
          PLAIN_TEXT=$(echo "$MARKDOWN_CONTENT" | sed -e 's/#//g' -e 's/\*\*//g' -e 's/`//g')
          PLAIN_TEXT="$PLAIN_TEXT\n\nTo continue reading: [Full Documentation](https://github.com/osllmai/Indox_Documents)"

          # Store variables
          delimiter=$(openssl rand -hex 6)
          echo "PLAIN_TEXT<<${delimiter}" | tee -a $GITHUB_ENV
          echo "$PLAIN_TEXT" | tee -a $GITHUB_ENV
          echo "${delimiter}" | tee -a $GITHUB_ENV

      - name: Fetch Latest Tag and Determine Next Version
        id: versioning
        run: |
          echo "üîç DEBUG: Fetching latest tags..."
          git fetch --tags
          LATEST_TAG=$(git tag -l "v*" --sort=-v:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1 | tr -d '\r')
          echo "üìå Latest Tag Found: $LATEST_TAG"

          if [[ -z "$LATEST_TAG" ]]; then
            NEW_TAG="v0.1.0"
            echo "üöÄ First release, setting initial tag to $NEW_TAG"
          else
            if [[ "$LATEST_TAG" =~ ^v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
              MAJOR="${BASH_REMATCH[1]}"
              MINOR="${BASH_REMATCH[2]}"
              PATCH="${BASH_REMATCH[3]}"
              PATCH=$((PATCH + 1))
              NEW_TAG="v$MAJOR.$MINOR.$PATCH"
              echo "‚úÖ Next Tag: $NEW_TAG"
            else
              echo "‚ùå ERROR: Could not parse latest tag '$LATEST_TAG'"
              exit 1
            fi
          fi

          echo "NEW_TAG=$NEW_TAG" | tee -a $GITHUB_ENV

      - name: Prepare Message
        id: prepare_message
        run: |
          RELEASE_MESSAGE="üöÄ *New Release: $NEW_TAG*\n\n\
          üìÇ Repository: [$REPO](https://github.com/$REPO)\n\
          üìú [Documentation](https://github.com/osllmai/Indox_Documents/blob/master/README.md)\n\
          üìú *Documentation Update Preview:*\n$PLAIN_TEXT\n\
          üè∑Ô∏è Version: $NEW_TAG\n\n\
          üîî Stay updated with the latest releases!"

          echo "MESSAGE_PAYLOAD=$RELEASE_MESSAGE" | tee -a $GITHUB_ENV
          echo "‚úÖ Message prepared successfully."

      - name: Send GitHub Event Notification to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_MASTER_URL }}
        run: |
          echo "üîç DEBUG: Sending message to Discord..."
          JSON_PAYLOAD=$(jq -n \
            --arg repo "$REPO" \
            --arg markdown_url "$MARKDOWN_URL" \
            --arg tag "$NEW_TAG" \
            --arg preview "$PLAIN_TEXT" \
            '{
              "username": "GitHub Bot",
              "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
              "embeds": [
                {
                  "title": "üöÄ Release \($tag)",
                  "description": "New release deployed automatically!",
                  "fields": [
                    {
                      "name": "üìÇ Repository",
                      "value": "[\($repo)](https://github.com/\($repo))",
                      "inline": false
                    },
                    {
                      "name": "üìú Documentation",
                      "value": "[Click here](\($markdown_url))",
                      "inline": false
                    },
                    {
                      "name": "üìú Documentation Update Preview",
                      "value": "\($preview)",
                      "inline": false
                    },
                    {
                      "name": "üè∑Ô∏è Version",
                      "value": "\($tag)",
                      "inline": false
                    }
                  ]
                }
              ]
            }')

          RESPONSE=$(curl -H "Content-Type: application/json" -X POST -d "$JSON_PAYLOAD" "$DISCORD_WEBHOOK_URL")
          echo "‚úÖ Discord Response: $RESPONSE"

      - name: Send GitHub Event Notification to Telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHANNEL_NAME: ${{ secrets.TELEGRAM_CHANNEL_NAME }}
        run: |
          echo "üîç DEBUG: Sending message to Telegram..."
          TELEGRAM_URL="https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage"

          RESPONSE=$(curl -s -G "$TELEGRAM_URL" \
            --data-urlencode "chat_id=$TELEGRAM_CHANNEL_NAME" \
            --data-urlencode "text=$MESSAGE_PAYLOAD" \
            --data-urlencode "parse_mode=Markdown")

          echo "‚úÖ Telegram Response: $RESPONSE"
